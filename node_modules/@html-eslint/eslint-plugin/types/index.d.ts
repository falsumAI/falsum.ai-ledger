import { name } from "../package.json";
import { version } from "../package.json";
import { HTMLLanguage } from "./languages/html-language";
import rules = require("./rules");
import type { ESLint } from "eslint";
import parser = require("@html-eslint/parser");
export declare namespace meta {
    export { name };
    export { version };
}
export declare namespace languages {
    let html: HTMLLanguage;
}
export { rules };
export declare let configs: {
    recommended: {
        rules: {
            "html/require-lang": "error";
            "html/require-img-alt": "error";
            "html/require-doctype": "error";
            "html/require-title": "error";
            "html/no-multiple-h1": "error";
            "html/no-extra-spacing-attrs": "error";
            "html/attrs-newline": "error";
            "html/element-newline": ["error", {
                inline: string[];
            }];
            "html/no-duplicate-id": "error";
            "html/indent": "error";
            "html/require-li-container": "error";
            "html/quotes": "error";
            "html/no-obsolete-tags": "error";
            "html/require-closing-tags": "error";
            "html/no-duplicate-attrs": "error";
            "html/use-baseline": "error";
            "html/no-duplicate-in-head": "error";
        };
        plugins: {};
    };
    "recommended-legacy": {
        rules: Record<string, "error" | ["error", {
            inline: string[];
        }]>;
    };
    "flat/recommended": {
        plugins: {
            /** @type {ESLint.Plugin} */
            readonly "@html-eslint": ESLint.Plugin;
        };
        languageOptions: {
            parser: typeof parser;
        };
        rules: Record<string, "error" | ["error", {
            inline: string[];
        }]>;
    };
};
//# sourceMappingURL=index.d.ts.map